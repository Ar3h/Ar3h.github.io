import{_ as s,o as a,c as n,e}from"./app-vMCaIZpZ.js";const t="/assets/Pasted_image_20220811163108-2TS7mtTA.png",i="/assets/Pasted_image_20220810072550-d3Thh5IT.png",l="/assets/Pasted_image_20230208114103-6OW4q7dz.png",o="/assets/Pasted_image_20220812223811-hVe7p6E_.png",p="/assets/Pasted_image_20220812223819-QBY3ELgH.png",c="/assets/Pasted_image_20220812223826-dVC2ITnw.png",r="/assets/16451987452148-5dzJB8s4.jpg",d="/assets/16451991096896-xOJi0uAO.jpg",u="/assets/16451994061081-CoYIx59w.jpg",v="/assets/16451996328668-xIBURBCR.jpg",m="/assets/16451998182283-zOGJhYYI.jpg",b="/assets/16459638402994-AxdzfY03.jpg",h="/assets/16464048443317-H_yVsLyd.jpg",k="/assets/wecom-temp-b55c7aef8ab7a65b8f875d2a309e71e1-MPes8CyR.png",g="/assets/Pasted_image_20221020162027-qrfFAFqu.png",_="/assets/Pasted_image_20221026160701-GSB7cqBX.png",f="/assets/Pasted_image_20221026160933-ShnHkLCB.png",x={},y=e(`<h1 id="痕迹隐藏与清理" tabindex="-1"><a class="header-anchor" href="#痕迹隐藏与清理" aria-hidden="true">#</a> 痕迹隐藏与清理</h1><p>本篇文章给渗透中常用命令做个记录</p><h2 id="linux-history相关" tabindex="-1"><a class="header-anchor" href="#linux-history相关" aria-hidden="true">#</a> Linux History相关</h2><h3 id="隐藏history命令" tabindex="-1"><a class="header-anchor" href="#隐藏history命令" aria-hidden="true">#</a> 隐藏History命令</h3><p>基础 命令记录的位置有两个，一个是内存缓存，另一个是默认的~/.bash_history文件中。刚开始的时候缓存和bash_history文件中的内容是一致的。</p><p>一般来说，当前shell exit退出的时候，才会把缓存写入到bash_history文件中，不过有的会实时写入到history文件中。</p><p>一些跟隐藏相关的命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 当前shell不记录命令到缓存中，但是这条记录仍然会记录</span>
<span class="token builtin class-name">set</span> +o <span class="token function">history</span>

<span class="token comment"># 读取history文件到history缓存中</span>
<span class="token function">history</span> <span class="token parameter variable">-r</span>

<span class="token comment"># 命令前有空格，就不进行记录</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">HISTCONTROL</span></span><span class="token operator">=</span>ignorespace

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发现如果PROMPT_COMMAND变量为&quot;history -a&quot;的话，那么命令就是实时写入的。 变为空后，命令就会立即切换为非实时写入，当shell退出时才会写入 <img src="`+t+`" alt=""></p><h3 id="方法一-不会记录任何东西" tabindex="-1"><a class="header-anchor" href="#方法一-不会记录任何东西" aria-hidden="true">#</a> 方法一：不会记录任何东西</h3><p>网上最常见的也是这个命令，使用后不会记录任何命令，内存、文件中都不会记录。缺点就是无法上翻命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">unset</span> HISTORY <span class="token environment constant">HISTFILE</span> HISTSAVE HISTZONE HISTORY HISTLOG<span class="token punctuation">;</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">HISTFILE</span></span><span class="token operator">=</span>/dev/null<span class="token punctuation">;</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">HISTSIZE</span></span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">HISTFILESIZE</span></span><span class="token operator">=</span><span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="方法二-不保存自己的记录-但是能看到原先的history记录。" tabindex="-1"><a class="header-anchor" href="#方法二-不保存自己的记录-但是能看到原先的history记录。" aria-hidden="true">#</a> 方法二：不保存自己的记录，但是能看到原先的history记录。</h3><p>此方法配合<a href="#ssh-%E9%9A%90%E8%94%BD%E8%BF%9E%E6%8E%A5">ssh-隐蔽连接</a>使用比较好</p><p>优点：简短 缺点：上翻命令是之前的历史命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> +o <span class="token function">history</span><span class="token punctuation">;</span> <span class="token function">history</span> <span class="token parameter variable">-r</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="方法三-记录渗透中的命令-不记录到本地文件" tabindex="-1"><a class="header-anchor" href="#方法三-记录渗透中的命令-不记录到本地文件" aria-hidden="true">#</a> 方法三：记录渗透中的命令，不记录到本地文件</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">HISTFILE</span></span><span class="token operator">=</span>/dev/null
<span class="token builtin class-name">set</span> +o <span class="token function">history</span><span class="token punctuation">;</span> <span class="token function">history</span> <span class="token parameter variable">-r</span>
script <span class="token parameter variable">-qc</span> /bin/bash /dev/null

<span class="token comment"># xxxx 中间是你渗透中的命令</span>

<span class="token comment"># 最后需要两个exit命令退出ssh shell</span>
<span class="token builtin class-name">exit</span>
<span class="token builtin class-name">exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，即使是命令实时写入文件，这个方法也没有写到文件中，而且也方便了渗透上下翻找命令，提高了效率。 <img src="`+i+'" alt=""></p><p>⚠️值得注意的是，使用方法三，是可以w、who命令看到登录的 <img src="'+l+`" alt=""></p><h2 id="清理history文件中指定行数的命令" tabindex="-1"><a class="header-anchor" href="#清理history文件中指定行数的命令" aria-hidden="true">#</a> 清理History文件中指定行数的命令</h2><p>如果不小心忘了隐藏History命令，而且已经被实时写入到了history文件中，那么以下方法可以清理指定的的命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 1. 首先需要停止记录你的history命令</span>
<span class="token builtin class-name">set</span> +o <span class="token function">history</span><span class="token punctuation">;</span> <span class="token function">history</span> <span class="token parameter variable">-r</span>

<span class="token comment"># 2. 查看history文件 末尾20行的行号</span>
<span class="token function">cat</span> <span class="token parameter variable">-n</span> /root/.bash_history<span class="token operator">|</span><span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">20</span>


<span class="token comment"># 3. 删除500行以及以后的数据</span>
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;500,$d&#39;</span> /root/.bash_history

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="linux文件清理" tabindex="-1"><a class="header-anchor" href="#linux文件清理" aria-hidden="true">#</a> Linux文件清理</h2><p>除了pom.xml文件和src文件夹内所有内容，其他都删除 （不会删除隐藏文件，例如.git）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token operator">!</span><span class="token punctuation">(</span>pom.xml<span class="token operator">|</span>src<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>shred命令可以覆盖文件内容，彻底删除内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># -v 查看详细过程</span>
<span class="token comment"># 文件内填充随机数据</span>
shred <span class="token number">123</span>.txt

<span class="token comment"># -u 在覆盖文件后删除文件</span>
shred <span class="token parameter variable">-u</span> <span class="token number">123</span>.txt

<span class="token comment"># -z 在覆盖文件后删除文件，并用最后用0填充</span>
shred <span class="token parameter variable">-u</span> <span class="token parameter variable">-z</span> <span class="token number">123</span>.txt
<span class="token comment"># 简写 🌟</span>
shred <span class="token parameter variable">-uz</span> <span class="token number">1</span>.txt

<span class="token comment"># 删除dir1目录下的所有文件（几十兆的文件很慢的） 🌟</span>
<span class="token function">find</span> dir1 <span class="token parameter variable">-type</span> f -print0<span class="token operator">|</span><span class="token function">xargs</span> <span class="token parameter variable">-0</span> shred <span class="token parameter variable">-fuzv</span>

<span class="token comment"># 删除硬盘</span>
shred /dev/sda1

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+o+'" alt=""><img src="'+p+'" alt=""><img src="'+c+`" alt=""></p><h2 id="linux日志文件清理" tabindex="-1"><a class="header-anchor" href="#linux日志文件清理" aria-hidden="true">#</a> Linux日志文件清理</h2><p>依赖服务为rsyslog（旧版本为syslog） /etc/init.d/rsyslog/ status</p><p>默认配置文件 /etc/syslog.conf /etc/rsyslog.conf（Centos6以后） 默认路径：/var/log（/var/tmp） 默认只有root用户对日志文件有修改权限</p><p>linux日志清除：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> /var/log/syslog
<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> /var/log/messages
<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> /var/log/httpd/access_log
<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> /var/log/httpd/error_log
<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> /var/log/xferlog
<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> /var/log/secure
<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> /var/log/auth.log
<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> /var/log/user.log
<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> /var/log/wtmp
<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> /var/log/lastlog
<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> /var/log/btmp
<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> /var/run/utmp
<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> /var/log/maillog
<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> /var/log/openwebmail.log
<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> /var/log/httpd/error_log
<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> /var/log/httpd/ssl_error_log
<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> /var/log/httpd/ssl_request_log
<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> /var/log/httpd/ssl_access_log
<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> ~/.bash_history
<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> ~/.zsh_history
<span class="token function">history</span> <span class="token parameter variable">-c</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>日志文件具体作用</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/var/log/message 系统启动后的信息和错误日志，是Red Hat Linux中最常用的日志之一
/var/log/secure 与安全相关的日志信息
/var/log/maillog 与邮件相关的日志信息
/var/log/cron 与定时任务相关的日志信息
/var/log/spooler 与UUCP和news设备相关的日志信息
/var/log/boot.log 守护进程启动和停止相关的日志消息
/var/log/wtmp   登录成功日志
/var/log/btmp – 记录所有失败登录信息  命令:lastb
/var/log/auth.log 系统授权信息，包括用户登录和使用的权限机制等 (debian)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="linux进程隐藏" tabindex="-1"><a class="header-anchor" href="#linux进程隐藏" aria-hidden="true">#</a> Linux进程隐藏</h2><p>这里使用的是开源的libnetcore，原理是劫持函数的返回</p><p>bash下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> libnetcore.so /usr/local/lib/libnetcore.so

<span class="token comment"># 修改/etc/ld.so.preload，指向我们的so</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;/usr/local/lib/libnetcore.so&quot;</span> <span class="token operator">&gt;</span> /etc/ld.so.preload
<span class="token comment"># 修改so库的时间</span>
<span class="token function">touch</span> <span class="token parameter variable">-r</span> 

<span class="token comment">##清理操作</span>
<span class="token comment"># 清理我们的恶意so文件：</span>
<span class="token builtin class-name">echo</span> <span class="token operator">&gt;</span> /etc/ld.so.preload
<span class="token function">rm</span> /usr/local/lib/libnetcore.so
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="linux文件时间篡改" tabindex="-1"><a class="header-anchor" href="#linux文件时间篡改" aria-hidden="true">#</a> Linux文件时间篡改</h2><p>Linux有三个文件时间：Access、Modify、Change 前两个时间比较容易修改，Change时间难以修改。</p><p>这里采用的是纯bash命令进行修改，方便快捷。不排除可以通过某些函数去修改文件时间，本文暂不讨论。</p><p>复制 net_affinity.log 文件的时间戳到 test 上： <code>touch -r net_affinity.log test</code><img src="`+r+'" alt=""></p><p>cat 访问一下文件内容就会更新Access的时间 <img src="'+d+'" alt=""></p><p>重定向符对文件三种时间的影响 追加&gt;&gt;对三个时间没有任何影响 覆盖&gt;只对Modify、Change有影响 <img src="'+u+'" alt=""></p><p>系统时间对三种时间的影响 <img src="'+v+`" alt=""> 恢复原来的时间</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看硬件时间</span>
hwclock
<span class="token comment"># 同步硬件时间为系统时间</span>
hwclock <span class="token parameter variable">--hctosys</span>
<span class="token comment"># 查看系统时间</span>
<span class="token function">date</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+m+'" alt=""></p><p>可执行脚本的赋予执行权限、运行对三种时间的影响 <img src="'+b+'" alt=""></p><p>结论：</p><p>./执行、bash执行、cat命令，只会更新Access时间</p><p>chmod赋予权限后，只会更新Change时间</p><p>vim 、echo管道符覆盖命令，会几乎同时更新Modifie、Change时间。</p><p>stat命令不会影响三个时间</p><p><img src="'+h+'" alt=""></p><p>整合为一句</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>t=&quot;2007/04/14 13:58:00&quot;;a=`date &quot;+%F %H:%M:%S&quot;`;date -s &quot;$t&quot;;touch test;date -s &quot;$a&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="'+k+`" alt=""></p><p>有个小缺陷，秒后面的时间都非常的整齐，不过已经能误导一部分人了。</p><p>操作命令对时间戳的影响总结：</p><table><thead><tr><th>operate</th><th>Access</th><th>Modify</th><th>Change</th></tr></thead><tbody><tr><td>touch -r</td><td>✅</td><td>✅</td><td>❌</td></tr><tr><td>touch</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>date(更改日期)</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>./执行/Bash执行</td><td>✅</td><td>❌</td><td>❌</td></tr><tr><td>cat</td><td>✅</td><td>❌</td><td>❌</td></tr><tr><td>覆盖 &gt;</td><td>❌</td><td>✅</td><td>✅</td></tr><tr><td>chmod</td><td>❌</td><td>❌</td><td>✅</td></tr><tr><td>stat</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>追加 &gt;&gt;</td><td>❌</td><td>❌</td><td>❌</td></tr></tbody></table><p>ls -l看到的是Modify时间 所以，简单 touch -r 复制时间戳可以应付</p><p>如果想要把Change时间也改变，那么需要下面的date、touch命令组合</p><p>把test文件的时间修改为 2019/04/14 13:58:00：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">targetDate</span><span class="token operator">=</span><span class="token string">&quot;2019/04/14 13:58:00&quot;</span> <span class="token comment"># 设定时间</span>
<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">date</span> <span class="token string">&quot;+%F %H:%M:%S&quot;</span><span class="token variable">\`</span></span><span class="token punctuation">;</span> <span class="token comment"># 保存时间</span>
<span class="token function">date</span> <span class="token parameter variable">-s</span> <span class="token string">&quot;<span class="token variable">$targetDate</span>&quot;</span>  <span class="token comment"># 更改时间</span>
<span class="token function">touch</span> <span class="token builtin class-name">test</span><span class="token punctuation">;</span>  <span class="token comment"># 修改某文件的时间</span>
<span class="token function">date</span> <span class="token parameter variable">-s</span> <span class="token string">&quot;<span class="token variable">$a</span>&quot;</span>  <span class="token comment"># 恢复时间</span>


<span class="token comment"># hwclock --hctosys # 恢复时间方法2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一句话，形式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 修改三种时间</span>
<span class="token assign-left variable">t</span><span class="token operator">=</span><span class="token string">&quot;2022/04/14 13:58:00&quot;</span><span class="token punctuation">;</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">date</span> <span class="token string">&quot;+%F %H:%M:%S&quot;</span><span class="token variable">\`</span></span><span class="token punctuation">;</span><span class="token function">date</span> <span class="token parameter variable">-s</span> <span class="token string">&quot;<span class="token variable">$t</span>&quot;</span><span class="token punctuation">;</span><span class="token function">touch</span> <span class="token builtin class-name">test</span><span class="token punctuation">;</span><span class="token function">date</span> <span class="token parameter variable">-s</span> <span class="token string">&quot;<span class="token variable">$a</span>&quot;</span>

<span class="token comment"># 只需改Modify、Change时间</span>
<span class="token function">touch</span> <span class="token builtin class-name">test</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ssh-隐蔽连接" tabindex="-1"><a class="header-anchor" href="#ssh-隐蔽连接" aria-hidden="true">#</a> SSH 隐蔽连接</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token parameter variable">-T</span> root@172.20.100.152 /bin/bash <span class="token parameter variable">-i</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>w命令是看不到的 <img src="`+g+`" alt=""></p><h2 id="忽略指纹对比以及记录到know-hosts文件" tabindex="-1"><a class="header-anchor" href="#忽略指纹对比以及记录到know-hosts文件" aria-hidden="true">#</a> 忽略指纹对比以及记录到know hosts文件</h2><p>重点是<code>-o StrictHostKeyChecking=no</code>参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token parameter variable">-o</span> <span class="token assign-left variable">StrictHostKeyChecking</span><span class="token operator">=</span>no <span class="token parameter variable">-T</span> root@10.113.0.2 /bin/bash <span class="token parameter variable">-i</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+_+'" alt=""></p><h2 id="ps命令显示不完整解决" tabindex="-1"><a class="header-anchor" href="#ps命令显示不完整解决" aria-hidden="true">#</a> ps命令显示不完整解决</h2><p><img src="'+f+'" alt=""></p><p>使用<code>ps -ef -ww</code>即可</p>',78),q=[y];function H(S,I){return a(),n("div",null,q)}const C=s(x,[["render",H],["__file","Linuxhenjiyincangyuqingli.html.vue"]]);export{C as default};
